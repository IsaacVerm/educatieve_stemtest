test <- lapply(splitIndices(length(actual), length(actual)/2), function(x) actual[x])
test <- lapply(test, function(x) {
score <- x[[1]]
names(score) <- x[[2]]
score <- t(as.data.frame(score))
return(score) })
test[[1]]
str(test[[1]])
test[[1]]
test <- rbindlist(test)
test <- lapply(splitIndices(length(actual), length(actual)/2), function(x) actual[x])
test <- lapply(test, function(x) {
score <- x[[1]]
names(score) <- x[[2]]
score <- as.data.frame(t(as.data.frame(score)))
return(score) })
# dataframe
test <- rbindlist(test)
View(test)
actual <- lapply(splitIndices(length(actual), length(actual)/2), function(x) actual[x])
actual <- lapply(actual, function(x) {
score <- x[[1]]
names(score) <- x[[2]]
score <- as.data.frame(t(as.data.frame(score)))
return(score) } )
# dataframe
actual <- rbindlist(actual)
View(actual)
statements_agreement$test
names(test_weights)
actual$test <- names(test_weights)
View(actual)
View(actual)
save_path
save(actual, file = file.path(save_path,"actual_all_agree_all_tests.RData"))
View(expected)
?rbindlist
### setup
## paths
setup_path <- file.path(root_path,"functions","general purpose","setup.RData")
vote_test_path <- file.path(root_path,"educatieve_stemtest","functions","vote_test.RData")
load_path <- file.path(root_path,"datasets","data","flemish_voting_test")
save_path <- file.path(root_path,"educatieve_stemtest","analysis","output","score_mechanism")
load_path_extra <- save_path
## setup environment
load(setup_path)
setup(used_packages = c("data.table","dplyr","parallel"))
### load
## files
load(file = file.path(load_path,"clean_statements_agreement.RData"))
load(file = file.path(load_path,"clean_statements_weight.RData"))
load(file = file.path(load_path,"clean_parties.RData"))
load(file = file.path(load_path,"clean_categories.RData"))
load(file = file.path(load_path_extra,"nr_statements_by_test.RData"))
load(file = file.path(load_path_extra,"themes_by_test.RData"))
## functions
load(vote_test_path)
### expected results
## make sure agreement and weights dataframes can be multiplied
statements_agreement$thesis <- NULL
statements_agreement$id <- NULL
statements_weight$id <- NULL
## only agree with the statements the parties chose to agree with
# agree
expected <- statements_agreement * statements_weight
# indication test got lost
expected$test <- statements_agreement$test
# expected score
expected <- expected %>% group_by(test) %>% summarise_all(funs(sum), na.rm = TRUE)
### actual results
## parameters
## set parameters
# votes
test_votes <- lapply(nr_statements$n, function(x) rep(1, times = x))
# weights
test_weights <- lapply(themes, function(x) try(sum(x)))
test_weights[["theme"]] <- NULL
test_weights <- lapply(test_weights, function(x) rep(0, times = x))
## simulate voting test
actual <- mapply(function(type,votes,weights) vote_test(type,votes,weights),
type = names(test_weights),
votes = test_votes,
weights = test_weights)
## get actual in the same format as expected
# put party name and score together
actual <- lapply(splitIndices(length(actual), length(actual)/2), function(x) actual[x])
actual <- lapply(actual, function(x) {
score <- x[[1]]
names(score) <- x[[2]]
score <- as.data.frame(t(as.data.frame(score)))
return(score) } )
# dataframe
test <- rbindlist(actual, use.names = TRUE)
View(test)
View(expected)
actual <- rbindlist(actual, use.names = TRUE)
View(actual)
actual$test <- names(test_weights)
View(actual)
save(actual, file = file.path(save_path,"actual_all_agree_all_tests.RData"))
expected$type <- "expected"
actual$type <- "actual"
View(actual)
View(expected)
difference <- rbindlist(list(actual, expected), use.names = TRUE)
difference <- rbindlist(list(actual, expected), use.names = TRUE, fill = TRUE)
View(difference)
test_difference <- difference %>% group_by(test) %>% summarise_all(funs(diff))
test_difference <- difference %>% group_by(test) %>% summarise_all(funs(try(diff)))
?summarise_each
?summarise_each_
View(parties)
test_difference <- difference %>% group_by(test) %>% summarise_each(funs(diff), one_of(parties$party))
test_difference <- difference %>% group_by(test) %>% summarise_each(funs(diff), vars = one_of(parties$party))
test_difference <- difference %>% group_by(test) %>% summarise_each_(funs(diff), vars = one_of(parties$party))
test_difference <- difference %>% group_by(test) %>% summarise_at(vars(parties$party), diff)
parties$party
test_difference <- difference %>% group_by(test) %>% summarise_at(vars(one_of(parties$party)), diff)
parties$party
test_difference <- difference %>% group_by(test) %>% summarise_at(vars(one_of(levels(parties$party))), diff)
View(test_difference)
library(ggplot2)
difference_by_test <- difference %>% group_by(test) %>% summarise_at(vars(one_of(levels(parties$party))), diff)
rm(test_difference)
View(difference_by_test)
apply(difference_by_test, 2, function(x) sum(is.na(x)))
apply(difference_by_test, 2, function(x) sum(is.na(x))) == 4
apply(difference_by_test, 2, function(x) sum(is.na(x))) == 4
names(difference_by_test)[apply(difference_by_test, 2, function(x) sum(is.na(x))) == 4]
superfluous_col <- names(difference_by_test)[apply(difference_by_test, 2, function(x) sum(is.na(x))) == 4]
superfluous_col <- names(!difference_by_test)[apply(difference_by_test, 2, function(x) sum(is.na(x))) == 4]
superfluous_col <- names(difference_by_test)[!apply(difference_by_test, 2, function(x) sum(is.na(x))) == 4]
superfluous_col
col_keep <- names(difference_by_test)[!apply(difference_by_test, 2, function(x) sum(is.na(x))) == 4]
difference_by_test <- select(difference_by_test, one_of(col_keep))
View(difference_by_test)
spread(difference_by_test)
library(tidyr)
spread(difference_by_test)
?spread
names(difference_by_test)
gather(difference_by_test, key = party, value = CD&V:Vlaams Belang)
gather(difference_by_test, key = party, value = 2:7)
select(difference_by_test, 2:7)
gather(difference_by_test, key = party, value = 2:7)
?gather
gather(difference_by_test, key = party, value = 2:7)
gather(difference_by_test, key = party, 2:7)
gather(difference_by_test, key = party, value = 2)
melt(difference_by_test)
gather(difference_by_test, key = 2:7, value = 2:7)
col_kepe
col_keep
molten_difference_by_test <- melt(difference_by_test)
View(molten_difference_by_test)
names(molten_difference_by_test) <- c("test","party","difference")
View(molten_difference_by_test)
molten_difference_by_test <- melt(difference_by_test)
names(molten_difference_by_test) <- c("test","party","difference")
graph_difference_by_test <- ggplot(data = molten_difference_by_test,
aes(x = party, y = difference, group = test)) + geom_path()
plot(graph_difference_by_test)
graph_difference_by_test <- ggplot(data = molten_difference_by_test,
aes(x = party, y = difference, group = test)) + geom_line()
plot(graph_difference_by_test)
graph_difference_by_test <- ggplot(data = molten_difference_by_test,
aes(x = party, y = difference, group = test)) + geom_line(colour = test)
plot(graph_difference_by_test)
graph_difference_by_test <- ggplot(data = molten_difference_by_test,
aes(x = party, y = difference, group = test)) + geom_line(color = test)
plot(graph_difference_by_test)
graph_difference_by_test <- ggplot(data = molten_difference_by_test,
aes(x = party, y = difference, group = test)) + geom_line(colour = group)
plot(graph_difference_by_test)
graph_difference_by_test <- ggplot(data = molten_difference_by_test,
aes(x = party, y = difference, group = test)) + geom_line(aes(colour = group))
plot(graph_difference_by_test)
graph_difference_by_test <- ggplot(data = molten_difference_by_test,
aes(x = party, y = difference, group = test, colour = group)) + geom_line()
plot(graph_difference_by_test)
View(test)
rm(test)
graph_difference_by_test <- ggplot(data = molten_difference_by_test,
aes(x = party, y = difference, group = test, colour = test)) + geom_line()
plot(graph_difference_by_test)
parties
unique(molten_difference_by_test$party)
unique(molten_difference_by_test$party) %in% parties$party
parties$party %in% unique(molten_difference_by_test$party)
arties$color[parties$party %in% unique(molten_difference_by_test$party)]
parties$color[parties$party %in% unique(molten_difference_by_test$party)]
party_palette <- parties$color[parties$party %in% unique(molten_difference_by_test$party)]
party_palette <- parties$color[parties$party %in% unique(molten_difference_by_test$party)]
# graph
graph_difference_by_test <- ggplot(data = molten_difference_by_test,
aes(x = party, y = difference, group = test, colour = test)) +
geom_line() +
scale_colour_manual(party_palette)
plot(graph_difference_by_test)
party_palette
rm(party_palette)
parties_palette <- paste0("#", parties$color[parties$party %in% unique(molten_difference_by_test$party)])
parties_palette <- paste0("#", parties$color[parties$party %in% unique(molten_difference_by_test$party)])
# graph
graph_difference_by_test <- ggplot(data = molten_difference_by_test,
aes(x = party, y = difference, group = test, colour = test)) +
geom_line() +
scale_colour_manual(party_palette)
plot(graph_difference_by_test)
graph_difference_by_test <- ggplot(data = molten_difference_by_test,
aes(x = party, y = difference, group = test, colour = test)) +
geom_line() +
scale_colour_manual(parties_palette)
plot(graph_difference_by_test)
parties_palette <- paste0("#", parties$color[parties$party %in% unique(molten_difference_by_test$party)])
# graph
graph_difference_by_test <- ggplot(data = molten_difference_by_test,
aes(x = party, y = difference, group = test, colour = test)) +
geom_line() +
scale_colour_manual(values = parties_palette)
plot(graph_difference_by_test)
View(parties)
View(difference)
View(difference_by_test)
graph_difference_by_test <- ggplot(data = molten_difference_by_test,
aes(x = test, y = difference, group = party, colour = party)) +
geom_line() +
scale_colour_manual(values = parties_palette)
plot(graph_difference_by_test)
# graph
graph_difference_by_test <- ggplot(data = molten_difference_by_test,
aes(x = test, y = difference, group = party, colour = party)) +
geom_line() +
scale_colour_manual(values = parties_palette) +
labs(y = "verschil tussen verwachte en echte score")
plot(graph_difference_by_test)
graph_difference_by_test <- ggplot(data = molten_difference_by_test,
aes(x = test, y = difference, group = party, colour = party)) +
geom_line() +
scale_colour_manual(values = parties_palette) +
labs(y = "verschil tussen verwachte en echte score") +
theme(legend.title=element_blank())
plot(graph_difference_by_test)
ggsave(graph_difference_by_test, file = file.path(save_path,"difference_by_test.png"))
View(themes)
### setup
## paths
setup_path <- file.path(root_path,"functions","general purpose","setup.RData")
vote_test_path <- file.path(root_path,"educatieve_stemtest","functions","vote_test.RData")
load_path <- file.path(root_path,"datasets","data","flemish_voting_test")
save_path <- file.path(root_path,"educatieve_stemtest","analysis","output","score_mechanism")
load_path_extra <- save_path
## setup environment
load(setup_path)
setup()
### load
## files
load(file = file.path(load_path,"clean_statements_agreement.RData"))
load(file = file.path(load_path,"clean_statements_weight.RData"))
# load(file = file.path(load_path,"clean_parties.RData"))
# load(file = file.path(load_path,"clean_categories.RData"))
# load(file = file.path(load_path_extra,"nr_statements_by_test.RData"))
# load(file = file.path(load_path_extra,"themes_by_test.RData"))
## functions
load(vote_test_path)
View(statements_agreement)
## make sure agreement and weights dataframes can be multiplied
statements_agreement$thesis <- NULL
statements_agreement$id <- NULL
statements_weight$id <- NULL
View(statements_weight)
test <- round(statements_weights, digits = 2)
test <- round(statements_weight, digits = 2)
test <- try(round(statements_weight, digits = 2))
test
?mutate_each
by_species <- iris %>% group_by(Species)
View(by_species)
?mutate_eachby_species %>% mutate_all(funs(. * 0.4))
?mutate_each
by_species %>% mutate_all(funs(. * 0.4))
rounding <- statements_weight %>% group_by(test) %>% mutate_all(funs(round), digits = 2)
View(rounding)
round_weights <- function(accuracy) statements_weight %>% group_by(test) %>% mutate_all(funs(round), digits = accuracy)
rm(by_species)
round_weights(3)
round_weights(4)
### setup
## paths
setup_path <- file.path(root_path,"functions","general purpose","setup.RData")
vote_test_path <- file.path(root_path,"educatieve_stemtest","functions","vote_test.RData")
load_path <- file.path(root_path,"datasets","data","flemish_voting_test")
save_path <- file.path(root_path,"educatieve_stemtest","analysis","output","score_mechanism")
load_path_extra <- save_path
## setup environment
load(setup_path)
setup()
### load
## files
load(file = file.path(load_path,"clean_statements_agreement.RData"))
load(file = file.path(load_path,"clean_statements_weight.RData"))
# load(file = file.path(load_path,"clean_parties.RData"))
# load(file = file.path(load_path,"clean_categories.RData"))
# load(file = file.path(load_path_extra,"nr_statements_by_test.RData"))
# load(file = file.path(load_path_extra,"themes_by_test.RData"))
## functions
load(vote_test_path)
### expected results
## make sure agreement and weights dataframes can be multiplied
statements_agreement$thesis <- NULL
statements_agreement$id <- NULL
statements_weight$id <- NULL
## function to create alternative versions statements_weight with different rounding digits
round_weights <- function(accuracy) statements_weight %>% group_by(test) %>% mutate_all(funs(round), digits = accuracy)
## only agree with the statements the parties chose to agree with
View(statements_agreement)
View(statements_weight)
expected <- lapply(0:7, function(x) statements_agreement * round_weights(x))
expected<- lapply(expected, function(x) x$test <- statements_agreement$test)
### setup
## paths
setup_path <- file.path(root_path,"functions","general purpose","setup.RData")
vote_test_path <- file.path(root_path,"educatieve_stemtest","functions","vote_test.RData")
load_path <- file.path(root_path,"datasets","data","flemish_voting_test")
save_path <- file.path(root_path,"educatieve_stemtest","analysis","output","score_mechanism")
load_path_extra <- save_path
## setup environment
load(setup_path)
setup()
### load
## files
load(file = file.path(load_path,"clean_statements_agreement.RData"))
load(file = file.path(load_path,"clean_statements_weight.RData"))
# load(file = file.path(load_path,"clean_parties.RData"))
# load(file = file.path(load_path,"clean_categories.RData"))
# load(file = file.path(load_path_extra,"nr_statements_by_test.RData"))
# load(file = file.path(load_path_extra,"themes_by_test.RData"))
## functions
load(vote_test_path)
### expected results
## make sure agreement and weights dataframes can be multiplied
statements_agreement$thesis <- NULL
statements_agreement$id <- NULL
statements_weight$id <- NULL
## function to create alternative versions statements_weight with different rounding digits
round_weights <- function(accuracy) statements_weight %>% group_by(test) %>% mutate_all(funs(round), digits = accuracy)
## only agree with the statements the parties chose to agree with
# agree
expected <- lapply(0:7, function(x) statements_agreement * round_weights(x))
# indication test got lost
expected<- lapply(expected, function(x) {
x$test <- statements_agreement$test
return(x) }
)
expected[[1]]
expected[[2]]
expected[[3]]
expected[[4]]
expected_score <- function(expected_df) expected %>% group_by(test) %>% summarise_all(funs(sum), na.rm = TRUE)
expected <- lapply(expected, expected_score)
expected_score <- function(expected_df) expected_df %>% group_by(test) %>% summarise_all(funs(sum), na.rm = TRUE)
expected <- lapply(expected, expected_score)
load(file = file.path(load_path_extra,"actual_all_agree_all_tests.RData"))
View(actual)
View(actual)
View(actual)
expected[[1]]
expected[[2]]
### setup
## paths
setup_path <- file.path(root_path,"functions","general purpose","setup.RData")
vote_test_path <- file.path(root_path,"educatieve_stemtest","functions","vote_test.RData")
load_path <- file.path(root_path,"datasets","data","flemish_voting_test")
save_path <- file.path(root_path,"educatieve_stemtest","analysis","output","score_mechanism")
load_path_extra <- save_path
## setup environment
load(setup_path)
setup()
### load
## files
load(file = file.path(load_path,"clean_statements_agreement.RData"))
load(file = file.path(load_path,"clean_statements_weight.RData"))
load(file = file.path(load_path_extra,"actual_all_agree_all_tests.RData"))
# load(file = file.path(load_path,"clean_parties.RData"))
# load(file = file.path(load_path,"clean_categories.RData"))
# load(file = file.path(load_path_extra,"nr_statements_by_test.RData"))
# load(file = file.path(load_path_extra,"themes_by_test.RData"))
## functions
load(vote_test_path)
### expected results
## make sure agreement and weights dataframes can be multiplied
statements_agreement$thesis <- NULL
statements_agreement$id <- NULL
statements_weight$id <- NULL
## function to create alternative versions statements_weight with different rounding digits
round_weights <- function(accuracy) statements_weight %>% group_by(test) %>% mutate_all(funs(round), digits = accuracy)
## only agree with the statements the parties chose to agree with
accuracy <- 0:7
expected <- lapply(accuracy, function(x) statements_agreement * round_weights(x))
## indication test got lost
expected <- lapply(expected, function(x) {
x$test <- statements_agreement$test
return(x) }
)
## function to calculate expected score
expected_score <- function(expected_df) expected_df %>% group_by(test) %>% summarise_all(funs(sum), na.rm = TRUE)
## calculate expected score
expected <- lapply(expected, expected_score)
## bind expected score dataframes together
expected[[4]]
names(expected) <- accuracy
lapply(expected, {
x$accuracy <- names(x)
return(x)
})
lapply(expected, function(x) {
x$accuracy <- names(x)
return(x)
})
### setup
## paths
setup_path <- file.path(root_path,"functions","general purpose","setup.RData")
vote_test_path <- file.path(root_path,"educatieve_stemtest","functions","vote_test.RData")
load_path <- file.path(root_path,"datasets","data","flemish_voting_test")
save_path <- file.path(root_path,"educatieve_stemtest","analysis","output","score_mechanism")
load_path_extra <- save_path
## setup environment
load(setup_path)
setup()
### load
## files
load(file = file.path(load_path,"clean_statements_agreement.RData"))
load(file = file.path(load_path,"clean_statements_weight.RData"))
load(file = file.path(load_path_extra,"actual_all_agree_all_tests.RData"))
# load(file = file.path(load_path,"clean_parties.RData"))
# load(file = file.path(load_path,"clean_categories.RData"))
# load(file = file.path(load_path_extra,"nr_statements_by_test.RData"))
# load(file = file.path(load_path_extra,"themes_by_test.RData"))
## functions
load(vote_test_path)
### expected results
## make sure agreement and weights dataframes can be multiplied
statements_agreement$thesis <- NULL
statements_agreement$id <- NULL
statements_weight$id <- NULL
## function to create alternative versions statements_weight with different rounding digits
round_weights <- function(accuracy) statements_weight %>% group_by(test) %>% mutate_all(funs(round), digits = accuracy)
## only agree with the statements the parties chose to agree with
accuracy <- 0:7
expected <- lapply(accuracy, function(x) statements_agreement * round_weights(x))
## indication test got lost
expected <- lapply(expected, function(x) {
x$test <- statements_agreement$test
return(x) }
)
## function to calculate expected score
expected_score <- function(expected_df) expected_df %>% group_by(test) %>% summarise_all(funs(sum), na.rm = TRUE)
## calculate expected score
expected <- lapply(expected, expected_score)
## bind expected score dataframes together
# add variable accuracy
sapply(expected, nrow)
### setup
## paths
setup_path <- file.path(root_path,"functions","general purpose","setup.RData")
vote_test_path <- file.path(root_path,"educatieve_stemtest","functions","vote_test.RData")
load_path <- file.path(root_path,"datasets","data","flemish_voting_test")
save_path <- file.path(root_path,"educatieve_stemtest","analysis","output","score_mechanism")
load_path_extra <- save_path
## setup environment
load(setup_path)
setup()
### load
## files
load(file = file.path(load_path,"clean_statements_agreement.RData"))
load(file = file.path(load_path,"clean_statements_weight.RData"))
load(file = file.path(load_path_extra,"actual_all_agree_all_tests.RData"))
# load(file = file.path(load_path,"clean_parties.RData"))
# load(file = file.path(load_path,"clean_categories.RData"))
# load(file = file.path(load_path_extra,"nr_statements_by_test.RData"))
# load(file = file.path(load_path_extra,"themes_by_test.RData"))
## functions
load(vote_test_path)
### expected results
## make sure agreement and weights dataframes can be multiplied
statements_agreement$thesis <- NULL
statements_agreement$id <- NULL
statements_weight$id <- NULL
## function to create alternative versions statements_weight with different rounding digits
round_weights <- function(accuracy) statements_weight %>% group_by(test) %>% mutate_all(funs(round), digits = accuracy)
## only agree with the statements the parties chose to agree with
accuracy <- 0:7
expected <- lapply(accuracy, function(x) statements_agreement * round_weights(x))
## indication test got lost
expected <- lapply(expected, function(x) {
x$test <- statements_agreement$test
return(x) }
)
## function to calculate expected score
expected_score <- function(expected_df) expected_df %>% group_by(test) %>% summarise_all(funs(sum), na.rm = TRUE)
## calculate expected score
expected <- lapply(expected, expected_score)
## bind expected score dataframes together
# bind
expected <- rbindlist(expected, use.names = TRUE)
View(expected)
rep(accuracy, times = nrow(actual))
rep(accuracy, each = nrow(actual))
expected$accuracy <- rep(accuracy, each = nrow(actual))
View(expected)
View(expected)
View(actual)
