# select template statements
templates <-  categories[template_ind, ]
# remove test as variable
templates$test <- NULL
## find themes by test
themes <- as.data.frame(apply(templates, 1, function(x) is.na(x)))
## correct names
themes$theme <- rownames(themes)
rownames(themes) <- NULL
names(themes) <- c(unique(categories$test),"theme")
### save
save(themes, file = file.path(save_path,"themes_by_test.RData"))
save(nr_statements, file = file.path(save_path,"nr_statements_by_test.RData"))
load(file = file.path(load_path_extra,"nr_statements_by_test.RData"))
load_file = file.path(load_path_extra,"themes_by_test.RData")
### setup
## paths
setup_path <- file.path(root_path,"functions","general purpose","setup.RData")
vote_test_path <- file.path(root_path,"educatieve_stemtest","functions","vote_test.RData")
load_path <- file.path(root_path,"datasets","data","flemish_voting_test")
save_path <- file.path(root_path,"educatieve_stemtest","analysis","output","score_mechanism")
load_path_extra <- save_path
## setup environment
load(setup_path)
setup(used_packages = c("data.table","dplyr"))
### load
## files
load(file = file.path(load_path,"clean_statements_agreement.RData"))
load(file = file.path(load_path,"clean_statements_weight.RData"))
load(file = file.path(load_path,"clean_parties.RData"))
load(file = file.path(load_path,"clean_categories.RData"))
load(file = file.path(load_path_extra,"nr_statements_by_test.RData"))
load_file = file.path(load_path_extra,"themes_by_test.RData")
themes_by_test
### setup
## paths
setup_path <- file.path(root_path,"functions","general purpose","setup.RData")
vote_test_path <- file.path(root_path,"educatieve_stemtest","functions","vote_test.RData")
load_path <- file.path(root_path,"datasets","data","flemish_voting_test")
save_path <- file.path(root_path,"educatieve_stemtest","analysis","output","score_mechanism")
load_path_extra <- save_path
## setup environment
load(setup_path)
setup(used_packages = c("data.table","dplyr"))
### load
## files
load(file = file.path(load_path,"clean_statements_agreement.RData"))
load(file = file.path(load_path,"clean_statements_weight.RData"))
load(file = file.path(load_path,"clean_parties.RData"))
load(file = file.path(load_path,"clean_categories.RData"))
load(file = file.path(load_path_extra,"nr_statements_by_test.RData"))
load_file = file.path(load_path_extra,"themes_by_test.RData"))
### setup
## paths
setup_path <- file.path(root_path,"functions","general purpose","setup.RData")
vote_test_path <- file.path(root_path,"educatieve_stemtest","functions","vote_test.RData")
load_path <- file.path(root_path,"datasets","data","flemish_voting_test")
save_path <- file.path(root_path,"educatieve_stemtest","analysis","output","score_mechanism")
load_path_extra <- save_path
## setup environment
load(setup_path)
setup(used_packages = c("data.table","dplyr"))
### load
## files
load(file = file.path(load_path,"clean_statements_agreement.RData"))
load(file = file.path(load_path,"clean_statements_weight.RData"))
load(file = file.path(load_path,"clean_parties.RData"))
load(file = file.path(load_path,"clean_categories.RData"))
load(file = file.path(load_path_extra,"nr_statements_by_test.RData"))
load(file = file.path(load_path_extra,"themes_by_test.RData"))
View(themes)
View(themes)
### setup
## paths
setup_path <- file.path(root_path,"functions","general purpose","setup.RData")
load_path <- file.path(root_path,"datasets","data","flemish_voting_test")
save_path <- file.path(root_path,"educatieve_stemtest","analysis","output","score_mechanism")
## setup environment
load(setup_path)
setup()
### load
## files
load(file = file.path(load_path,"clean_categories.RData"))
### number of statements by test
nr_statements <- categories %>% group_by(test) %>% summarise(n = n())
### number of weights by test
## simplify by taking template statement by test
# indices template statements
template_ind <- c(1, head(cumsum(nr_statements$n), -1) + 1)
# select template statements
templates <-  categories[template_ind, ]
# remove test as variable
templates$test <- NULL
## find themes by test
themes <- as.data.frame(apply(templates, 1, function(x) is.na(x)))
## correct names
themes$theme <- rownames(themes)
rownames(themes) <- NULL
names(themes) <- c(unique(categories$test),"theme")
View(themes)
unique(categories$test)
### setup
## paths
setup_path <- file.path(root_path,"functions","general purpose","setup.RData")
load_path <- file.path(root_path,"datasets","data","flemish_voting_test")
save_path <- file.path(root_path,"educatieve_stemtest","analysis","output","score_mechanism")
## setup environment
load(setup_path)
setup()
### load
## files
load(file = file.path(load_path,"clean_categories.RData"))
### number of statements by test
nr_statements <- categories %>% group_by(test) %>% summarise(n = n())
### number of weights by test
## simplify by taking template statement by test
# indices template statements
template_ind <- c(1, head(cumsum(nr_statements$n), -1) + 1)
# select template statements
templates <-  categories[template_ind, ]
# remove test as variable
templates$test <- NULL
## find themes by test
themes <- as.data.frame(apply(templates, 1, function(x) is.na(x)))
## correct names
themes$theme <- rownames(themes)
rownames(themes) <- NULL
names(themes) <- c(names(unique(categories$test)),"theme")
### save
save(themes, file = file.path(save_path,"themes_by_test.RData"))
save(nr_statements, file = file.path(save_path,"nr_statements_by_test.RData"))
### setup
## paths
setup_path <- file.path(root_path,"functions","general purpose","setup.RData")
vote_test_path <- file.path(root_path,"educatieve_stemtest","functions","vote_test.RData")
load_path <- file.path(root_path,"datasets","data","flemish_voting_test")
save_path <- file.path(root_path,"educatieve_stemtest","analysis","output","score_mechanism")
load_path_extra <- save_path
## setup environment
load(setup_path)
setup(used_packages = c("data.table","dplyr"))
### load
## files
load(file = file.path(load_path,"clean_statements_agreement.RData"))
load(file = file.path(load_path,"clean_statements_weight.RData"))
load(file = file.path(load_path,"clean_parties.RData"))
load(file = file.path(load_path,"clean_categories.RData"))
load(file = file.path(load_path_extra,"nr_statements_by_test.RData"))
load(file = file.path(load_path_extra,"themes_by_test.RData"))
## functions
load(vote_test_path)
### expected results
## make sure agreement and weights dataframes can be multiplied
statements_agreement$thesis <- NULL
statements_agreement$id <- NULL
statements_weight$id <- NULL
## only agree with the statements the parties chose to agree with
# agree
expected <- statements_agreement * statements_weight
# indication test got lost
expected$test <- statements_agreement$test
# expected score
expected <- expected %>% group_by(test) %>% summarise_all(funs(sum), na.rm = TRUE)
### actual results
## parameters
## set parameters
View(nr_statements)
View(themes)
test_votes <- lapply(nr_statements, function(x) rep(1, times = x))
test_votes <- lapply(nr_statements$n, function(x) rep(1, times = x))
### setup
## paths
setup_path <- file.path(root_path,"functions","general purpose","setup.RData")
load_path <- file.path(root_path,"datasets","data","flemish_voting_test")
save_path <- file.path(root_path,"educatieve_stemtest","analysis","output","score_mechanism")
## setup environment
load(setup_path)
setup()
### load
## files
load(file = file.path(load_path,"clean_categories.RData"))
### number of statements by test
nr_statements <- categories %>% group_by(test) %>% summarise(n = n())
### number of weights by test
## simplify by taking template statement by test
# indices template statements
template_ind <- c(1, head(cumsum(nr_statements$n), -1) + 1)
# select template statements
templates <-  categories[template_ind, ]
# remove test as variable
templates$test <- NULL
## find themes by test
themes <- as.data.frame(apply(templates, 1, function(x) is.na(x)))
## correct names
themes$theme <- rownames(themes)
rownames(themes) <- NULL
names(themes) <- c(names(unique(categories$test)),"theme")
View(themes)
names(unique(categories$test))
categories$test
View(categories)
### setup
## paths
setup_path <- file.path(root_path,"functions","general purpose","setup.RData")
load_path <- file.path(root_path,"datasets","data","flemish_voting_test")
save_path <- file.path(root_path,"educatieve_stemtest","analysis","output","score_mechanism")
## setup environment
load(setup_path)
setup()
### load
## files
load(file = file.path(load_path,"clean_categories.RData"))
### number of statements by test
nr_statements <- categories %>% group_by(test) %>% summarise(n = n())
### number of weights by test
## simplify by taking template statement by test
# indices template statements
template_ind <- c(1, head(cumsum(nr_statements$n), -1) + 1)
# select template statements
templates <-  categories[template_ind, ]
# remove test as variable
templates$test <- NULL
## find themes by test
themes <- as.data.frame(apply(templates, 1, function(x) is.na(x)))
## correct names
themes$theme <- rownames(themes)
rownames(themes) <- NULL
names(themes) <- c(levels(categories$test),"theme")
### save
save(themes, file = file.path(save_path,"themes_by_test.RData"))
save(nr_statements, file = file.path(save_path,"nr_statements_by_test.RData"))
View(themes)
### setup
## paths
setup_path <- file.path(root_path,"functions","general purpose","setup.RData")
vote_test_path <- file.path(root_path,"educatieve_stemtest","functions","vote_test.RData")
load_path <- file.path(root_path,"datasets","data","flemish_voting_test")
save_path <- file.path(root_path,"educatieve_stemtest","analysis","output","score_mechanism")
load_path_extra <- save_path
## setup environment
load(setup_path)
setup(used_packages = c("data.table","dplyr"))
### load
## files
load(file = file.path(load_path,"clean_statements_agreement.RData"))
load(file = file.path(load_path,"clean_statements_weight.RData"))
load(file = file.path(load_path,"clean_parties.RData"))
load(file = file.path(load_path,"clean_categories.RData"))
load(file = file.path(load_path_extra,"nr_statements_by_test.RData"))
load(file = file.path(load_path_extra,"themes_by_test.RData"))
## functions
load(vote_test_path)
### expected results
## make sure agreement and weights dataframes can be multiplied
statements_agreement$thesis <- NULL
statements_agreement$id <- NULL
statements_weight$id <- NULL
## only agree with the statements the parties chose to agree with
# agree
expected <- statements_agreement * statements_weight
# indication test got lost
expected$test <- statements_agreement$test
# expected score
expected <- expected %>% group_by(test) %>% summarise_all(funs(sum), na.rm = TRUE)
### actual results
## parameters
## set parameters
test_votes <- lapply(nr_statements$n, function(x) rep(1, times = x))
View(themes)
test_weights <- apply(themes, function(x) sum(x))
test_weights <- apply(themes, 2, function(x) sum(x))
test_weights <- apply(themes, 2, function(x) try(sum(x)))
test_weights
sapply(themes, class)
test_weights <- lapply(themes, function(x) try(sum(x)))
### setup
## paths
setup_path <- file.path(root_path,"functions","general purpose","setup.RData")
load_path <- file.path(root_path,"datasets","data","flemish_voting_test")
save_path <- file.path(root_path,"educatieve_stemtest","analysis","output","score_mechanism")
## setup environment
load(setup_path)
setup()
### load
## files
load(file = file.path(load_path,"clean_categories.RData"))
### number of statements by test
nr_statements <- categories %>% group_by(test) %>% summarise(n = n())
### number of weights by test
## simplify by taking template statement by test
# indices template statements
template_ind <- c(1, head(cumsum(nr_statements$n), -1) + 1)
# select template statements
templates <-  categories[template_ind, ]
# remove test as variable
templates$test <- NULL
## find themes by test
themes <- as.data.frame(apply(templates, 1, function(x) is.na(x)))
## correct names
themes$theme <- rownames(themes)
rownames(themes) <- NULL
names(themes) <- c(levels(categories$test),"theme")
View(themes)
### setup
## paths
setup_path <- file.path(root_path,"functions","general purpose","setup.RData")
load_path <- file.path(root_path,"datasets","data","flemish_voting_test")
save_path <- file.path(root_path,"educatieve_stemtest","analysis","output","score_mechanism")
## setup environment
load(setup_path)
setup()
### load
## files
load(file = file.path(load_path,"clean_categories.RData"))
### number of statements by test
nr_statements <- categories %>% group_by(test) %>% summarise(n = n())
### number of weights by test
## simplify by taking template statement by test
# indices template statements
template_ind <- c(1, head(cumsum(nr_statements$n), -1) + 1)
# select template statements
templates <-  categories[template_ind, ]
# remove test as variable
templates$test <- NULL
### setup
## paths
setup_path <- file.path(root_path,"functions","general purpose","setup.RData")
load_path <- file.path(root_path,"datasets","data","flemish_voting_test")
save_path <- file.path(root_path,"educatieve_stemtest","analysis","output","score_mechanism")
## setup environment
load(setup_path)
setup()
### load
## files
load(file = file.path(load_path,"clean_categories.RData"))
### number of statements by test
nr_statements <- categories %>% group_by(test) %>% summarise(n = n())
### number of weights by test
## simplify by taking template statement by test
# indices template statements
template_ind <- c(1, head(cumsum(nr_statements$n), -1) + 1)
# select template statements
templates <-  categories[template_ind, ]
# remove test as variable
templates$test <- NULL
## find themes by test
themes <- as.data.frame(apply(templates, 1, function(x) !is.na(x)))
## correct names
themes$theme <- rownames(themes)
rownames(themes) <- NULL
names(themes) <- c(levels(categories$test),"theme")
### save
save(themes, file = file.path(save_path,"themes_by_test.RData"))
save(nr_statements, file = file.path(save_path,"nr_statements_by_test.RData"))
### setup
## paths
setup_path <- file.path(root_path,"functions","general purpose","setup.RData")
vote_test_path <- file.path(root_path,"educatieve_stemtest","functions","vote_test.RData")
load_path <- file.path(root_path,"datasets","data","flemish_voting_test")
save_path <- file.path(root_path,"educatieve_stemtest","analysis","output","score_mechanism")
load_path_extra <- save_path
## setup environment
load(setup_path)
setup(used_packages = c("data.table","dplyr"))
### load
## files
load(file = file.path(load_path,"clean_statements_agreement.RData"))
load(file = file.path(load_path,"clean_statements_weight.RData"))
load(file = file.path(load_path,"clean_parties.RData"))
load(file = file.path(load_path,"clean_categories.RData"))
load(file = file.path(load_path_extra,"nr_statements_by_test.RData"))
load(file = file.path(load_path_extra,"themes_by_test.RData"))
## functions
load(vote_test_path)
### expected results
## make sure agreement and weights dataframes can be multiplied
statements_agreement$thesis <- NULL
statements_agreement$id <- NULL
statements_weight$id <- NULL
## only agree with the statements the parties chose to agree with
# agree
expected <- statements_agreement * statements_weight
# indication test got lost
expected$test <- statements_agreement$test
# expected score
expected <- expected %>% group_by(test) %>% summarise_all(funs(sum), na.rm = TRUE)
### actual results
## parameters
## set parameters
test_votes <- lapply(nr_statements$n, function(x) rep(1, times = x))
test_weights <- lapply(themes, function(x) try(sum(x)))
test_weights[["theme"]] <- NULL
test_weights <- lapply(test_weights, function(x) rep(0, times = x))
names(test_weights)
### setup
## paths
setup_path <- file.path(root_path,"functions","general purpose","setup.RData")
vote_test_path <- file.path(root_path,"educatieve_stemtest","functions","vote_test.RData")
load_path <- file.path(root_path,"datasets","data","flemish_voting_test")
save_path <- file.path(root_path,"educatieve_stemtest","analysis","output","score_mechanism")
load_path_extra <- save_path
## setup environment
load(setup_path)
setup(used_packages = c("data.table","dplyr"))
### load
## files
load(file = file.path(load_path,"clean_statements_agreement.RData"))
load(file = file.path(load_path,"clean_statements_weight.RData"))
load(file = file.path(load_path,"clean_parties.RData"))
load(file = file.path(load_path,"clean_categories.RData"))
load(file = file.path(load_path_extra,"nr_statements_by_test.RData"))
load(file = file.path(load_path_extra,"themes_by_test.RData"))
## functions
load(vote_test_path)
### expected results
## make sure agreement and weights dataframes can be multiplied
statements_agreement$thesis <- NULL
statements_agreement$id <- NULL
statements_weight$id <- NULL
## only agree with the statements the parties chose to agree with
# agree
expected <- statements_agreement * statements_weight
# indication test got lost
expected$test <- statements_agreement$test
# expected score
expected <- expected %>% group_by(test) %>% summarise_all(funs(sum), na.rm = TRUE)
### actual results
## parameters
## set parameters
# votes
test_votes <- lapply(nr_statements$n, function(x) rep(1, times = x))
# weights
test_weights <- lapply(themes, function(x) try(sum(x)))
test_weights[["theme"]] <- NULL
test_weights <- lapply(test_weights, function(x) rep(0, times = x))
## simulate voting test
actual <- lapply(names(test_weights),
function(x) vote_test(x, test_votes, test_weights))
### setup
## paths
setup_path <- file.path(root_path,"functions","general purpose","setup.RData")
vote_test_path <- file.path(root_path,"educatieve_stemtest","functions","vote_test.RData")
load_path <- file.path(root_path,"datasets","data","flemish_voting_test")
save_path <- file.path(root_path,"educatieve_stemtest","analysis","output","score_mechanism")
load_path_extra <- save_path
## setup environment
load(setup_path)
setup(used_packages = c("data.table","dplyr"))
### load
## files
load(file = file.path(load_path,"clean_statements_agreement.RData"))
load(file = file.path(load_path,"clean_statements_weight.RData"))
load(file = file.path(load_path,"clean_parties.RData"))
load(file = file.path(load_path,"clean_categories.RData"))
load(file = file.path(load_path_extra,"nr_statements_by_test.RData"))
load(file = file.path(load_path_extra,"themes_by_test.RData"))
## functions
load(vote_test_path)
### expected results
## make sure agreement and weights dataframes can be multiplied
statements_agreement$thesis <- NULL
statements_agreement$id <- NULL
statements_weight$id <- NULL
## only agree with the statements the parties chose to agree with
# agree
expected <- statements_agreement * statements_weight
# indication test got lost
expected$test <- statements_agreement$test
# expected score
expected <- expected %>% group_by(test) %>% summarise_all(funs(sum), na.rm = TRUE)
### actual results
## parameters
## set parameters
# votes
test_votes <- lapply(nr_statements$n, function(x) rep(1, times = x))
# weights
test_weights <- lapply(themes, function(x) try(sum(x)))
test_weights[["theme"]] <- NULL
test_weights <- lapply(test_weights, function(x) rep(0, times = x))
## simulate voting test
actual <- lapply(names(test_weights),
function(x) vote_test(x, test_votes, test_weights))
actual <- mapply(function(type,votes,weights) vote_test(type,votes,weights),
type = names(test_weights),
votes = test_votes,
weights = test_weights)
View(expected)
View(actual)
View(actual)
names(actual)
actual[[1]]
actual[[2]]
View(expected)
install.packages("parallel")
?splitIndices
library(parallel)
?splitIndices
splitIndices(20, 3)
splitIndices(1:length(actual), length(actual)/2)
splitIndices(1:length(actual), length(actual)/2)
splitIndices(length(actual), length(actual)/2)
test <- lapply(splitIndices(length(actual), length(actual)/2), function(x) actual[x])
actual_test <- lapply(splitIndices(length(actual), length(actual)/2), function(x) actual[x])
rm(test)
length(actual_test[[1]][[2]])
lapply(actual_test, function(x) data.frame(score = x[[1]], party = x[[2]]))
actual <- lapply(splitIndices(length(actual), length(actual)/2), function(x) actual[x])
actual <- lapply(actual, function(x) data.frame(score = x[[1]], party = x[[2]]))
rm(actual_test)
View(expected)
actual[[1]]
t(actual[[1]])
